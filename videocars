#!python

import os
from PIL import Image
import matplotlib.pyplot as plt
import pandas as pd
import argparse
import numpy as np
import time
import cv2
import sys

input_video = sys.argv[1]
confidence = float(sys.argv[2])
nms = float(sys.argv[3])


def load_yolo(config_path, weights_path):

    class_names = []
    with open("yolo/cars.names", "r") as f:
        class_names = [line.strip() for line in f.readlines()]
    colors = np.random.uniform(0, 255, size=(len(class_names), 3))
    net = cv2.dnn.readNet(weights_path, config_path)
    net.setPreferableBackend(cv2.dnn.DNN_BACKEND_CUDA)
    net.setPreferableTarget(cv2.dnn.DNN_TARGET_CUDA)

    model = cv2.dnn_DetectionModel(net)
    model.setInputParams(size=(416, 416), scale=1 / 256)
    return model, colors, class_names


def video_preds(video):
    vc = cv2.VideoCapture(f"{video}")
    model, colors, class_names = load_yolo(
        "yolo/yolov4-tiny-custom_best.weights", "yolo/yolov4-tiny-custom.cfg"
    )
    while True:
        (grabbed, frame) = vc.read()
        if not grabbed:
            exit()

        start = time.time()
        classes, scores, boxes = model.detect(frame, confidence, nms)
        end = time.time()

        start_drawing = time.time()
        for (classid, score, box) in zip(classes, scores, boxes):
            color = colors[int(classid) % len(colors)]
            label = "%s : %f" % (class_names[classid[0]], score)
            cv2.rectangle(frame, box, color, 2)
            cv2.putText(
                frame,
                label,
                (box[0], box[1] - 10),
                cv2.FONT_HERSHEY_SIMPLEX,
                0.5,
                color,
                2,
            )
        end_drawing = time.time()

        fps_label = "FPS: %.2f (excluding drawing time of %.2fms)" % (
            1 / (end - start),
            (end_drawing - start_drawing) * 1000,
        )
        cv2.putText(frame, fps_label, (0, 25), cv2.FONT_HERSHEY_PLAIN, 1, (0, 0, 0), 2)
        cv2.imshow("detections", frame)
        if cv2.waitKey(1) & 0xFF == ord("q"):
            break
    vc.release()
    # Destroy all the windows
    cv2.destroyAllWindows()


video_preds(input_video)